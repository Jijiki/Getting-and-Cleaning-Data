install.packages(c("colorspace", "faraway", "forecast", "fracdiff", "glmnet", "graphics", "grDevices", "grid", "lattice", "LearnBayes", "MASS", "Matrix", "methods", "mgcv", "nlme", "nnet", "parallel", "plyr", "quadprog", "Rcpp", "RcppArmadillo", "reshape", "stats", "tseries", "urca", "utils", "rJava", "zoo"))
a <- available.packages()
head(rownames(a),3)
install.package(KernSmooth)
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
?gl
?split
library(datasets)
data("iris")
data(iris)
?iris
q()
R.Version()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library("installr", lib.loc="C:/Program Files/R/R-3.2.1/library")
detach("package:installr", unload=TRUE)
q()
?split
install.packages("JPEG")
install.packages("JPEG")
y
install.packages("jpeg")
load(jpeg)
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg")
jpeg("picture.jpg",native=TRUE)
jpeg("picture.jpg")
class(jpeg("picture.jpg"))
data <- jpeg("picture.jpg")
data <- rbind(data.frame(),jpeg("picture.jpg"))
data <- rbind(data.frame(),readJPEG("picture.jpg",native = TRUE))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg")
data <- rbind(data.frame(),readJPEG("picture.jpg",native = TRUE))
data <- readJPEG("picture.jpg",native = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg")
img <- readJPEG("picture.jpg",native = TRUE)
rasterImage(img, 1.5, 1.5, 1.9, 1.8)
plot(1:2, type='n')
rasterImage(img, 1.5, 1.5, 1.9, 1.8)
if (exists("rasterImage")) { # can plot only in R 2.11.0 and higher
plot(1:2, type='n')
#rasterImage(data, 1.2, 1.27, 1.8, 1.73)
rasterImage(img, 1.5, 1.5, 1.9, 1.8)
}
exists("rasterImage")
quantile(img,probs = seq(0.3,0.8))
quantile(img,probs = seq(0,0.3,0.8,1))
quantile(img,probs = c(0.3,0.8))
quantile(img,probs = c(0.3,0.8),na.rm = TRUE)
quantile(img,probs = c(0.3,0.8),na.rm = FALSE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg")
img <- readJPEG("picture.jpg",native = TRUE)
quantile(img,probs = c(0.3,0.8),na.rm = FALSE,)
dim(img)
quantile(img,probs = c(0.3,0.8),na.rm = FALSE)
plot(img)
quantile(img,probs = c(0.2,0.7),na.rm = FALSE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "wb")
img <- readJPEG("picture.jpg",native = TRUE)
dim(img)
quantile(img,probs = c(0.2,0.7),na.rm = FALSE)
quantile(img,probs = c(0.3,0.8),na.rm = FALSE)
plot(img)
library(raster)
install.packages("raster")
library(raster)
library(rgdal)
install(rgdal)
install.packages(rgdal)
install.packages("rgdal")
library(rgdal)
library(raster)
myJPG <- raster("picture.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
myJPG <- raster("picture.jpg")
plot(myJPG)
library("graphics", lib.loc="C:/Program Files/R/R-3.2.2/library")
plot(myJPG)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
myJPG <- raster("picture.jpg")
plot(myJPG)
library("grDevices", lib.loc="C:/Program Files/R/R-3.2.2/library")
myJPG <- raster("picture.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
myJPG <- raster("picture.jpg")
plot(myJPG)
library('ReadImages')
install.packages('ReadImages')
install.packages('biOps')
plot_jpeg = function(path, add=FALSE)
{
require('jpeg')
jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[1:2] # get the resolution
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
plot_jpeg('picture.jpg')
plot_jpeg("picture.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
plot_jpeg("picture.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
plot_jpeg("picture.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
img <- readJPEG("picture.jpg",native = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "w")
img <- readJPEG("picture.jpg",native = TRUE)
dim(img)
quantile(img,probs = c(0.3,0.8),na.rm = FALSE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "wb")
plot_jpeg("picture.jpg")
rm(ls)
rm(list = ls())
setwd("C:/Users/rbaiti.j/Documents/Training/Data Science Specialization/Getting and Cleaning Data/")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpg",mode = "wb")
plot_jpeg = function(path, add=FALSE)
{
require('jpeg')
jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[1:2] # get the resolution
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
plot_jpeg("picture.jpg")
"abc"&"def"
"abc"+"def"
gdp <- rbind(data.frame(),read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"))
head(gdp)
head(gdp,30)
gdp[194,]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","gdp.csv")
gdp <- rbind(data.frame(),read.csv("gdp.csv"))
head(gdp,30)
gdp[194,]
gdp <- rbind(data.frame(),read.csv("gdp.csv"))
head(gdp,30)
names(gdp) <- gdp[3,]
head(gdp,30)
names(gdp) <- gdp[2,]
head(gdp,30)
gdp <- rbind(data.frame(),read.csv("gdp.csv"))
head(gdp,30)
readlines("gdp.csv")
readLines("gdp.csv")
gdp[2,]
names(gdp) <- gdp[3,]
gdp[3,]
allcontent[-1:-2]
allcontent <- readLines("gdp.csv")
allcontent[-1:-2]
names <- rbind(data.frame(),read.csv(allcontent[3:4]))
allcontent <- readLines("gdp.csv")
names <- rbind(data.frame(),read.csv(allcontent[3:4]))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","gdp.csv")
allcontent <- readLines("gdp.csv")
names <- rbind(data.frame(),read.table(allcontent[3:4],sep=","))
colnames(gdp) <- gdp[3,]
gdp[194,]
colnames(gdp) <- gdp[3,]
gdp[194,]
gdp <- rbind(data.frame(),read.csv("gdp.csv"))
colnames(gdp) <- gdp[3,]
gdp[194,]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","education.csv")
education <- rbind(data.frame(),read.csv("education.csv"))
head(education)
education[education$CountryCode==gdp[194,1]]
gdp[194,1]
education[education$CountryCode==gdp[194,1],]
education$CountryCode
class(education$CountryCode)
class(gdp[194,1])
gdp[194,1][1]
as.character(gdp[194,1])
education[as.character(education$CountryCode)==as.character(gdp[194,1]),]
count(education[as.character(education$CountryCode)==as.character(gdp[194,1]),])
length(education[as.character(education$CountryCode)==as.character(gdp[194,1]),])
as.character(education$CountryCode)==as.character(gdp[194,1])
sum(as.character(education$CountryCode)==as.character(gdp[194,1]))
head(gdp,30)
gdp <- rbind(data.frame(),read.csv("gdp.csv"))
head(gdp,10)
190gdp <- gdp[gdp$Gross.domestic.product.2012==190,]
selectedgdp <- gdp[gdp$Gross.domestic.product.2012==190,]
head(selectedgdp)
names <- rbind(data.frame(),read.table(allcontent[3:4],sep=",",blank.lines.skip = TRUE))
gdp <- rbind(data.frame(),read.csv("gdp.csv",blank.lines.skip = TRUE))
head(gdp,10)
gdp <- rbind(data.frame(),read.csv("gdp.csv",blank.lines.skip = TRUE,fill = TRUE))
head(gdp,10)
gdp[194:220,]
gdp[220:250,]
gdp[1:6,]
as.character(gdp[5:194,1])
as.character(education$CountryCode)==as.character(gdp[5:194,1])
education$CountryCode==gdp[5:194,1]
length(education[as.character(education$CountryCode)==as.character(gdp[194,1]),])
education$CountryCode
gdp[1:6,]
head(gdp[5:194,1])
education$CountryCode==gdp[5:194,1]
count = 0
for (code in gdp$Gross.domestic.product.2012) {
if (code %in% education$CountryCode) count = count + 1
}
gdp$Gross.domestic.product.2012
gdp$X
for (code in gdp$X) {
if (code %in% education$CountryCode) count = count + 1
}
count
sum(for(code in gdp$X) code %in% education$CountryCode)
sum(for(code in gdp$X) (code %in% education$CountryCode)
sum(for(code in gdp$X) (code %in% education$CountryCode))
sum(for(code in gdp$X) {code %in% education$CountryCode})
sum(for(code in gdp$X) {code %in% education$CountryCode})
gdp$X
count
education$CountryCode
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
households <- rbind(data.frame(),read.csv("data.csv"))
head(households)
filter(households,ACR == 3,AGS == 6)
agricultureLogical <- filter(households,ACR == 3,AGS == 6)
head(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- (households$ACR == 3 & households$AGS == 6)
head(agricultureLogical)
which(agricultureLogical)
gdp <- rbind(data.frame(),read.csv("gdp.csv",blank.lines.skip = TRUE,fill = TRUE))
head(gdp,10)
selectedgdp <- gdp[5:194,]
head(selectedgdp)
selectedgdp <- gdp[5:194,c(1,2,4,5)]
head(selectedgdp)
names(selectedgdp) <- c("CountryCode","Rank","CountryName","GDP (millions of USD)")
head(selectedgdp)
tail(selectedgdp)
matching <- which(education$CountryCode==selectedgdp$CountryCode)
matching <- which(as.character(education$CountryCode)==as.character(selectedgdp$CountryCode))
head(matching)
head(selectedgdp)
tail(selectedgdp)
head(education)
count
merge(education,gdp,by.x = "CountryCode",by.y = "CountryCode")
names(education)
names(gdp)
names(selectedgdp)
merge(education,selectedgdp,by.x = "CountryCode",by.y = "CountryCode")
mergeddata <- merge(education,selectedgdp,by.x = "CountryCode",by.y = "CountryCode")
count(mergeddata)
mergeddata[13,]
head(mergeddata[,1:4],13)
names(mergeddata)
arrange(mergeddata,Rank)
head(mergeddata[,1:4],13)
mergeddata <- arrange(mergeddata,Rank)
head(mergeddata[,1:4],13)
head(mergeddata[,1:4],15)
mergeddata[mergeddata$Rank==13,]
mergeddata[mergeddata$Rank==13,1:4]
HIOECD <- filter(mergeddata,Income.Group = "High Income: OECD")
HIOECD <- filter(mergeddata,Income.Group == "High Income: OECD")
mean(HIOECD$`GDP (millions of USD)`)
mean(HIOECD[,GDP (millions of USD)])
mean(HIOECD[`GDP (millions of USD)`])
sum(is.na(HIOECD$`GDP (millions of USD)`))
any(is.na(HIOECD$`GDP (millions of USD)`))
mean(HIOECD$`GDP (millions of USD)`)
class(HIOECD$`GDP (millions of USD)`)
mean(as.numeric(HIOECD$`GDP (millions of USD)`))
any(is.na(as.numeric(HIOECD$`GDP (millions of USD)`)))
mean(as.numeric(HIOECD$`GDP (millions of USD)`))
head(HIOECD$`GDP (millions of USD)`)
head(as.numeric(HIOECD$`GDP (millions of USD)`))
str(HIOECD)
HIOECD[,"`GDP (millions of USD)`"] <- as.numeric(HIOECD[,`GDP (millions of USD)`])
HIOECD$`GDP (millions of USD)`
HIOECD[,`GDP (millions of USD)`]
HIOECD[,"`GDP (millions of USD)`"]
HIOECD[,[`GDP (millions of USD)`]
HIOECD[,[`GDP (millions of USD)`]]
head(HIOECD[,34])
HIOECD[,34] <- as.numeric(HIOECD[,34])
head(HIOECD[,34])
HIOECD <- filter(mergeddata,Income.Group == "High Income: OECD")
head(as.numeric(levels(HIOECD$`GDP (millions of USD)`))
)
class(HIOECD$`GDP (millions of USD)`)
head(HIOECD[,34])
head(as.numeric(levels(HIOECD[,34])))
HIOECD[,34] <- as.numeric(levels(HIOECD[,34]))
class(HIOECD$`GDP (millions of USD)`)
head(HIOECD[,34])
HIOECD[,34] <- as.numeric(levels(HIOECD[,34]))[HIOECD[,34]]
class(HIOECD$`GDP (millions of USD)`)
head(HIOECD[,34])
HIOECD <- filter(mergeddata,Income.Group == "High Income: OECD")
HIOECD[,34] <- as.numeric(levels(HIOECD[,34]))[HIOECD[,34]]
class(HIOECD$`GDP (millions of USD)`)
head(HIOECD[,34])
HIOECDgdp <- HIOECD[,34])
HIOECDgdp <- HIOECD[,34]
HIOECDgdp
HIOECD <- filter(mergeddata,Income.Group == "High Income: OECD")
HIOECDgdp <- HIOECD[,34]
HIOECDgdp
HIOECDgdp <- as.numeric(levels(HIOECDgdp))[HIOECDgdp]
HIOECDgdp
HIOECDgdp <- HIOECD[,34]
HIOECDgdp
HIOECDgdp <- as.numeric(as.character(HIOECDgdp))
HIOECDgdp
HIOECDgdp <- HIOECD[,34]
HIOECDgdp
head(as.numeric(levels(HIOECD[,34])))
HIOECDgdp <- as.numeric( sub(",", ".", as.character(HIOECDgdp)) )
head(HIOECDgdp)
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.numeric( sub(",", ".", as.character(HIOECDgdp)) )
HIOECDgdp <- as.numeric(as.character(HIOECDgdp))
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.numeric( sub(",", ".", as.character(HIOECDgdp)) )
head(HIOECDgdp)
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.character(HIOECDgdp)
HIOECDgdp
HIOECDgdp <- as.factor.character(HIOECDgdp)
HIOECDgdp <- HIOECD[,34]
HIOECDgdp
HIOECDgdp <- as.character(HIOECDgdp)
HIOECDgdp
HIOECDgdp <- as.character(levels(HIOECDgdp))
HIOECDgdp
HIOECDgdp <- as.character(levels(HIOECDgdp))
HIOECDgdp
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.character(levels(HIOECDgdp))
HIOECDgdp
HIOECDgdp <- as.numeric( sub(",", ".", HIOECDgdp)
HIOECDgdp
HIOECDgdp <- as.numeric( sub(",", ".", HIOECDgdp))
HIOECDgdp
mean(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp),])
complete.cases(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
mean(HIOECD$Rank)
mean(as.numeric(as.character(HIOECD$Rank)))
HIOECDRank <- as.numeric(as.character(HIOECD$Rank))
HIOECDRank
HIOECD
HIOECD$Rank
HIOECD$Rank[complete.cases(HIOECD$Rank)]
HIOECDRank
as.character(HIOECD$Rank)
HIOECD$Rank
HIOECDRank <- as.numeric(levels(HIOECD$Rank))[HIOECD$Rank]
HIOECDRank
HIOECD$Rank
HIOECD$Rank <- as.character(HIOECD$Rank)
HIOECD$Rank
head(HIOECD)
head(mergeddata)
head(HIOECD)
HIOECD <- filter(mergeddata,Income.Group == "High income: OECD")
head(HIOECD)
HIOECDRank <- as.numeric(levels(HIOECD$Rank))[HIOECD$Rank]
HIOECDRank
mean(HIOECDRank)
HINOECD <- filter(mergeddata,Income.Group == "High income: nonOECD")
HINOECD <- filter(mergeddata,Income.Group == "High income: nonOECD")
HINOECDRank <- as.numeric(levels(HINOECD$Rank))[HINOECD$Rank]
HINOECDRank
mean(HINOECDRank)
complete.cases(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.numeric(levels(HIOECDgdp))[HIOECDgdp]
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.numeric( sub(",", ".", HIOECDgdp))
HIOECDgdp <- as.numeric(as.character(HIOECDgdp))
complete.cases(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.character(levels(HIOECDgdp))
HIOECDgdp
HIOECDgdp <- as.numeric( sub(",", ".", HIOECDgdp))
HIOECDgdp <- as.numeric(as.character(HIOECDgdp))
complete.cases(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
HIOECDgdp <- HIOECD[,34]
HIOECDgdp <- as.character(levels(HIOECDgdp))[HIOECDgdp]
HIOECDgdp
HIOECDgdp <- as.numeric( sub(",", ".", HIOECDgdp))
HIOECDgdp <- as.numeric(as.character(HIOECDgdp))
complete.cases(HIOECDgdp)
mean(HIOECDgdp[complete.cases(HIOECDgdp)])
install.packages(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
mergeddata$GDP.group <- cut2(mergeddata$`GDP (millions of USD)`,g=5)
head(mergeddata$GDP.group)
mergeddata$GDP <- mergeddata$`GDP (millions of USD)` %>% as.character(levels())
mergeddata$GDP <- mergeddata$`GDP (millions of USD)` %>% as.character(levels())[]
mergeddata$GDP <- as.numeric(sub(",", ".",as.character(levels(mergeddata$`GDP (millions of USD)`))))
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
head(mergeddata$GDP.group)
head(mergeddata$GDP)
mergeddata$GDP <- as.numeric(sub(",", ".",as.character(levels(mergeddata$`GDP (millions of USD)`))))
head(mergeddata$GDP)
head(mergeddata$`GDP (millions of USD)`)
class(mergeddata$GDP)
class(HIOECDgdp)
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
names(mergeddata)
groupeddata <- mutate(mergeddata,GDP.groups=cut2(mergeddata$`GDP (millions of USD)`,g=5))
head(groupeddata)
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
mergeddata$GDP <- as.numeric(sub(",", ".",as.character(levels(mergeddata$`GDP (millions of USD)`))))
mergeddata$GDP.group <- cut2(mergeddata$`GDP (millions of USD)`,g=5)
head(groupeddata)
names(mergeddata)
mergeddata$GDP <- as.numeric(sub(",", ".",as.character(levels(mergeddata$`GDP (millions of USD)`))))
nrow(mergeddata)
length(as.numeric(sub(",", ".",as.character(levels(mergeddata$`GDP (millions of USD)`)))))
mergeddata$GDP <- as.numeric(sub(",", ".",as.character(mergeddata$`GDP (millions of USD)`)))
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
nrow(mergeddata)
names(mergeddata)
mergeddata[1:6,32:36]
mergeddata$GDP <- as.numeric(sub(",", ".",sub(",", ".",as.character(mergeddata$`GDP (millions of USD)`)))
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
mergeddata$GDP <- as.numeric(sub(",", ".",sub(",", ".",as.character(mergeddata$`GDP (millions of USD)`))))
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
mergeddata[1:6,32:36]
test <- mergeddata[1:6,32:36]
test$GDP <- sub(",", ".",as.character(mergeddata$`GDP (millions of USD)`))
test$GDP <- sub(",", ".",as.character(test$`GDP (millions of USD)`))
test
test$GDP <- sub(",", ".",test$GDP)
test
test$GDP <- as.numeric(test$GDP)
test
test <- mergeddata[1:6,32:36]
test$GDP <- sub(",", "",as.character(test$`GDP (millions of USD)`))
test$GDP <- as.numeric(test$GDP)
test
test <- mergeddata[1:6,32:36]
test$GDP <- sub(",", "",as.character(test$`GDP (millions of USD)`))
test$GDP <- sub(",", "",test$GDP)
test$GDP <- as.numeric(test$GDP)
test
test$GDP <- sub(",", "",test$GDP)
test <- mergeddata[1:6,32:36]
test$GDP <- gsub(",", "",as.character(test$`GDP (millions of USD)`))
test
test$GDP <- as.numeric(test$GDP)
mergeddata$GDP <- as.numeric(gsub(",", "",as.character(mergeddata$`GDP (millions of USD)`))))
mergeddata$GDP <- as.numeric(gsub(",", "",as.character(mergeddata$`GDP (millions of USD)`)))
class(mergeddata$GDP)
mergeddata$GDP.group <- cut2(mergeddata$GDP,g=5)
mergeddata[1:6,32:36]
table(mergeddata$GDP.group)
table(mergeddata$GDP.group,mergeddata$Income.Group)
mergeddata[mergeddata$Rank==13,1:4]
mergeddata[1:15,c(30:36)]
mergeddata <- arrange(mergeddata,Rank)
mergeddata[1:15,c(30:36)]
mergeddata$Rank <- as.numeric(gsub(",", "",as.character(mergeddata$Rank)))
mergeddata <- arrange(mergeddata,Rank)
mergeddata[1:15,c(30:36)]
mergeddata <- arrange(mergeddata,desc=Rank)
mergeddata[1:15,c(30:36)]
mergeddata <- arrange(mergeddata,desc=Rank)
arrange(mergeddata,desc=Rank)
head(arrange(mergeddata,desc=Rank))
arrange(mergeddata,desc=Rank)[1:15,30:36]
arrange(mergeddata,desc=Rank)[1:15,30:36]
arrange(mergeddata,desc(Rank))[1:15,30:36]
rm(list = ls())
setwd("C:/Users/rbaiti.j/Documents/Training/Data Science Specialization/Getting and Cleaning Data/Project")
dir.create("Project")
setwd("C:/Users/rbaiti.j/Documents/Training/Data Science Specialization/Getting and Cleaning Data/Project")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","projectfiles.zip")
unzip("projectfiles.zip")
ls
dir()
